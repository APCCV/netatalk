#ifndef _ATALK_LOGGER_H
#define _ATALK_LOGGER_H 1

#include <limits.h>
#include <stdio.h>

#include <atalk/boolean.h>

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#define MAXLOGSIZE 512

enum loglevels {
    log_none     = 0,
    log_severe   = 10,
    log_error    = 20,
    log_warning  = 30,
    log_note     = 40,
    log_info     = 50,
    log_debug    = 60,
    log_debug6   = 70,
    log_debug7   = 80,
    log_debug8   = 90,
    log_debug9   = 100,
    log_maxdebug = 110
};
#define LOGLEVEL_STRING_IDENTIFIERS { \
  "LOG_NOTHING",                      \
  "LOG_SEVERE",                       \
  "LOG_ERROR",                        \
  "LOG_WARN",                         \
  "LOG_NOTE",                         \
  "LOG_INFO",                         \
  "LOG_DEBUG",                        \
  "LOG_DEBUG6",                       \
  "LOG_DEBUG7",                       \
  "LOG_DEBUG8",                       \
  "LOG_DEBUG9",                       \
  "LOG_MAXDEBUG"}                        

/* this is the enum specifying all availiable logtypes */
enum logtypes {
  logtype_default,
  logtype_core,
  logtype_logger,
  logtype_cnid,
  logtype_afpd,
  logtype_atalkd,
  logtype_papd,
  logtype_uams,

  logtype_end_of_list_marker  /* don't put any logtypes after this */
};

/* these are the string identifiers corresponding to each logtype */
#define LOGTYPE_STRING_IDENTIFIERS { \
  "Default",                         \
  "Core",                            \
  "Logger",                          \
  "CNID",                            \
  "AFPDaemon",                       \
  "ATalkDaemon",                     \
  "PAPDaemon",                       \
  "UAMSDaemon",                      \
                                     \
  "end_of_list_marker"}              \

/* Display Option flags. */
/* redefine these so they can don't interfeer with syslog */
/* these can be used in standard logging too */
#define logoption_nsrcinfo    0x04   /* don't log source info */
/* the following do not work anymore, they're only provided in order to not
 * break existing source code */
#define logoption_pid         0x01   /* log the pid with each message */
#define logoption_cons        0x02   /* log on the console if error logging */
#define logoption_ndelay      0x08   /* don't delay open */
#define logoption_perror      0x20   /* log to stderr as well */
#define logoption_nfile       0x40   /* ignore the file that called the log */
#define logoption_nline       0x80   /* ignore the line that called the log*/

/* facility codes */
/* redefine these so they can don't interfeer with syslog */
#define logfacility_user        (1<<3)  /* random user-level messages */
#define logfacility_mail        (2<<3)  /* mail system */
#define logfacility_daemon      (3<<3)  /* system daemons */
#define logfacility_auth        (4<<3)  /* security/authorization messages */
#define logfacility_syslog      (5<<3)  /* messages generated by syslogd */
#define logfacility_lpr         (6<<3)  /* line printer subsystem */
#define logfacility_authpriv    (10<<3) /* security/auth messages (private) */
#define logfacility_ftp         (11<<3) /* ftp daemon */

/* ========================================================================= 
    Structure definitions
   ========================================================================= */

/* Main log config */
typedef struct {
    int   inited;		  /* file log config initialized ? */
    int   filelogging;		  /* Any level set to filelogging ? */
                                  /* Deactivates syslog logging */
    char  processname[16];
    int   syslog_opened;	  /* syslog opened ? */
    int   facility;               /* syslog facility to use */
    int   syslog_display_options;
    int   syslog_level;           /* Log Level to send to syslog */
} log_config_t;

/* This stores the config and options for one filelog type (e.g. logger, afpd etc.) */
typedef struct {
    int  set;			  /* set individually ? yes: changing default
				   * doesnt change it. no: it changes it.*/
    char *filename;               /* Name of file */
    int  fd;                      /* logfiles fd */
    int  level;                   /* Log Level to put in this file */
    int  display_options;
} filelog_conf_t;

/* ========================================================================= 
    Global variables
   ========================================================================= */

#ifndef LOGGER_C
/* Make config accessible for LOG macro */
extern log_config_t log_config;
extern filelog_conf_t file_configs[logtype_end_of_list_marker];

/* These are used by the LOG macro to store __FILE__ and __LINE__ */
extern char *log_src_filename;
extern int  log_src_linenumber;
#endif

/* =========================================================================
    Global function decarations
   ========================================================================= */

/*  */
void log_init(void);

/* Setup the level and type of log that will be logged for file loggging */
bool log_setup(char *filename, enum loglevels loglevel, enum logtypes logtype);

/* Setup the level and type of log that will be logged to syslog. */
//void syslog_setup(enum loglevels loglevel);
void syslog_setup(int loglevel, enum logtypes logtype, 
		  int display_options, int facility);

/* void setuplog(char *logsource, char *logtype, char *loglevel, char *filename); */
void setuplog(char *logtype, char *loglevel, char *filename);

/* finish up and close the logs */
void log_close();

/* This function sets up the ProcessName */
void set_processname(char *processname);

/*
 * How to write a LOG macro:
 * http://c-faq.com/cpp/debugmacs.html
 * 
 * We choose the verbose form in favor of the obfuscated ones, its easier
 * to parse for human beings and facilitates expanding the macro for
 * inline checks for debug levels.
 *
 * How to properly enclose multistatement macros:
 * http://en.wikipedia.org/wiki/C_macro#Multiple_statements
 */

/* LOG macro func no.1: log the message to file */
void make_log_entry(enum loglevels loglevel, enum logtypes logtype, char *message, ...);

/* LOG macro func no.2: log the message to syslog */
void make_syslog_entry(enum loglevels loglevel, enum logtypes logtype, char *message, ...);

/* 
   Note:
   any configured file-logging deactivates syslog logging
 */

#define LOG(a,b, ...)  \
  do { \
    if ( ! log_config.inited) \
      log_init(); \
    if (file_configs[b].level >= a) \
      log_src_filename = __FILE__, \
      log_src_linenumber = __LINE__, \
      make_log_entry(a, b, __VA_ARGS__); \
    else if (( ! log_config.filelogging) && (log_config.syslog_level >= a)) \
       make_syslog_entry(a, b, __VA_ARGS__); \
  } while(0)  
#endif /* _ATALK_LOGGER_H */
